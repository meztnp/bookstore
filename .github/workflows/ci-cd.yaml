name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger this pipeline when pushing to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests targeting the main branch

permissions:
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from GitHub
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub (or Azure ACR)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify installation

      # Step 5: Build & Push the Stack Images using Docker Compose
      - name: Build & Push Stack Images
        run: |
          docker-compose -f docker-compose.yml build
          docker-compose -f docker-compose.yml push

  deploy-to-aks:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code again to get Kubernetes configuration
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Log in to Azure using Service Principal credentials
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      # Step 3: Set up Kubernetes context for AKS
      - name: Set Kubernetes Context
        run: |
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_CLUSTER_NAME }}

      # Step 4: Install Velero CRDs Before Deploying Velero
      - name: Install Velero CRDs
        run: |
          kubectl apply -f velero-crds/  

      # Step 4: Apply Kubernetes Deployment YAML files
      - name: Apply Kubernetes Configurations
        run: |
          kubectl apply -f kubernetes/postgres-deployment.yml
          kubectl apply -f kubernetes/catalog-service-deployment.yml
          kubectl apply -f kubernetes/cart-service-deployment.yml
          kubectl apply -f kubernetes/frontend-deployment.yml
          kubectl apply -f kubernetes/frontend-ingress.yml
          kubectl apply -f kubernetes/velero-secret.yml -n velero
          kubectl apply -f kubernetes/velero-service.yml -n velero
          kubectl apply -f kubernetes/catalog-service-hpa.yml 
          kubectl apply -f kubernetes/cart-service-hpa.yml
          kubectl apply -f kubernetes/frontend-service-hpa.yml

      # Step 5: Verify Deployment (Check Pod Status)
      - name: Verify Deployment
        run: |
          kubectl get pods
